(in-package goal)

;name: tm-vin-intro.gc

(deftype tm-vin-intro (task-manager)
  ((start-intro             symbol)
   (vin-timer                  int)
   (vin-spawned?            symbol)
  )
 (:state-methods
 active
 spawn-vin
 idle
 dead
 )
)

(defstate active (tm-vin-intro)
    :virtual #t
    :code
    (behavior ()
        (set! (-> self start-intro) #f)
        (set! (-> self vin-spawned?) #f)
        (loop
            (let ((vec (new 'static 'vector
                        :x (meters 2384.7390)  
                        :y (meters 36.5538)  
                        :z (meters 537.5184)
                        :w 1.0)
                        )
                    )
                (when 
                    (and
                        (>= (vector-vector-distance (target-pos 0) vec) 500000.0)
                        (= weather-dark-mode #t)
                        (= in-pre-tutorial? #f)
                        ;(task-node-closed? (game-task-node arena-fight-1-resolution))
                        (= (-> self start-intro) #f)
                    )
                    (set! (-> self start-intro) #t)
                    (camera-locked #f #f #f)
                    (go-virtual spawn-vin)
                )
            )
            (suspend)
        )
    )
)

(defstate spawn-vin (tm-vin-intro)
    :virtual #t
    :code 
    (behavior ()
        (loop
            (+! (-> self vin-timer) 1)
            (when (= (-> self vin-timer) 1)
                (disable-hudmap)
                (set! log-id 99)
            )
            (send-event *camera* 'teleport-to-vector-start-string
                (new 'static 'vector
                :x (meters 2210.0664)
                :y (meters 37.4410)
                :z (meters 593.1369)
                :w 1.0)
                )
            (set! (-> *target* cam-user-mode) 'fixed)
            (set-setting-by-param *setting-control* 'mode-name 'cam-fixed 0 0)
            (set-vector! (-> *target* control trans) (meters 2214.0627) (meters 300.4160) (meters 387.7540) 1.0)
            (when 
                (and
                    (>= (-> self vin-timer) 220)
                    (= (-> self vin-spawned?) #f)
                )
                (set! in-dialogue? #t)
                (set! log-sec 0)
                (set! di-s "Jak? Jak!")
                (set! di-s2 "")
                (set! di-s3 "")
                (set! di-s4 "")
            )
            (when (= (-> self vin-spawned?) #t)
                (when (= (-> self vin-timer) 537)
                    (toggle-white-mode)
                )
                (when (= (-> self vin-timer) 540)
                    (let ((vec (new 'static 'vector
                                :x (meters 2210.5275)
                                :y (meters 250.3139)
                                :z (meters -46.37)
                                :w 1.0)
                            )
                        )
                        (toggle-white-mode)
                        (spawn-vin-effect vec)
                        (set! (-> self vin-spawned?) #t)
                        (set! in-dialogue? #t)
                        (set! log-sec 0)
                        (set! log-id 99)
                        (set! di-s "It's me, Vin!")
                        (set! di-s2 "I finally found you")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                )
            )
            (when (>= (-> self vin-timer) 4000)
                (set! (-> self vin-timer) 1200)
            )
            (when 
                (and
                    (= in-dialogue? #t)
                    (= log-id 99)
                    (= (-> self vin-spawned?) #f)
                    (cpad-pressed? 0 x)
                )
                    (+! log-sec 1)
                    (when (= log-sec 1)
                        (set! in-dialogue? #f)
                        (set! (-> self vin-spawned?) #t)
                        (set! (-> self vin-timer) 421)
                    )
                )
            (when 
                (and
                    (= in-dialogue? #t)
                    (= log-id 99)
                    (= (-> self vin-spawned?) #t)
                    (cpad-pressed? 0 x)
                )
                    (+! log-sec 1)
                    (when (= log-sec 1)
                        (set! di-s "You were nowhere to be found in this")
                        (set! di-s2 "dimension! Where did you go just now?")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 2)
                        (set! di-s "...")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 3)
                        (set! di-s "w-wait you..")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 4)
                        (set! di-s "b-But the entity..")
                        (set! di-s2 "yo-you.. I.")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 5)
                        (set! di-s "The Entity isn't supposed to create rifts")
                        (set! di-s2 "...then")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 6)
                        (set! di-s "It's already too late!")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 7)
                        (set! di-s "The Entity isn't here in this world anymore")
                        (set! di-s2 "It might already be over...")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 8)
                        (set! di-s "...")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 9)
                        (set! di-s "No... It cant be..")
                        (set! di-s2 "i-I have to recalculate")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 10)
                        (set! di-s "Scanning... Linking the thought neurons...")
                        (set! di-s2 "Bypassing inprobability... cleaning up..")
                        (set! di-s3 "Account for remainder...")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 11)
                        (set! di-s "...")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 12)
                        (set! di-s "Done! i-It's so simple!")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 13)
                        (set! di-s "All we need is just 6 actors.. 6 characters")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 14)
                        (set! di-s "Oh goodness... They have already perished in this world.")
                        (set! di-s2 "o-Oh my this is a huge problem")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 15)
                        (set! di-s "Factor in INPROBABILITY!")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 16)
                        (set! di-s "Ok! Right... these warp gates go to different dimensions")
                        (set! di-s2 "Just go right back in and look for those.. uhh,")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 17)
                        (set! di-s "They're called <COLOR_YELLOW>Side Characters<COLOR_WHITE>, and")
                        (set! di-s2 "you have to ask them to come here, with you.")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 18)
                        (set! di-s "y-yeah.. if we get all of these characters here in this world,")
                        (set! di-s2 "the possibility of repairing your original dimension...")
                        (set! di-s3 "y'know.. this one that we're in..")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 19)
                        (set! di-s "all we need is those 6 side characters here")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 20)
                        (set! di-s "Go back through the warp gate, transport")
                        (set! di-s2 "yourself back to the other dimension")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 21)
                        (set! di-s "and think of a way to get")
                        (set! di-s2 "Kleiver, Damas, Torn,")
                        (set! di-s3 "Ashelin, Tess, and Vegar")
                        (set! di-s4 "back into this world with you!")
                    )
                    (when (= log-sec 22)
                        (set! di-s "Tell them that the fate of reality")
                        (set! di-s2 "hangs on them coming with you, on this")
                        (set! di-s3 "epic quest")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 23)
                        (set! di-s "I'm counting on you, Jak. I'll help in any")
                        (set! di-s2 "way that I can... b-but I also cannot stay")
                        (set! di-s3 "long...")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 24)
                        (set! di-s "I must not be found by The Entity..")
                        (set! di-s2 "")
                        (set! di-s3 "")
                        (set! di-s4 "")
                    )
                    (when (= log-sec 25)
                        (set! in-dialogue? #f)
                        (set! log-sec 0)
                        (set! log-id 0)
                        (camera-unlocked)
                        (go-virtual dead)
                    )
                )
            (suspend)
        )
    )
)

(defstate dead (tm-vin-intro)
    :virtual #t
    :code
    (behavior ()
        (task-node-close! (game-task-node desert-vin-quest-introduction) #t)
        (task-node-close! (game-task-node desert-vin-quest-resolution) #t)
        (set-vector! (-> *target* control trans) (meters 2209.6555) (meters 35.6581) (meters 415.9187) 1.0)
        (auto-save-user)
    )
)
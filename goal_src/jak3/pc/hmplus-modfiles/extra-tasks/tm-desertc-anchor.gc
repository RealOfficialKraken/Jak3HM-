(in-package goal)

;name: tm-desertc-anchor.gc

(deftype tm-desertc-anchor (task-manager)
  ((wave                           int)
   (wave-max                       int)
   (max-count                      int)
   (ship-inside?                 symbol)
   (boss-spawned?                symbol)
   (blast-i                        int)
   (fling-i                        int)
   (fling-max                      int)
   (general-i                      int)
   (general-f                    float)
   (fog-i                        float)
   (lightning-pos               vector)
   (fireball-pos                vector)
   (spawn-pos                   vector)
   (reward-box                  vector)
   (getoff-bounds               vector)
   (spawn-count                    int)
   (waiting?                    symbol)
   (wait-i                         int)
   (wave-sp      (inline-array vector))
  )
 (:state-methods
 active
 idle
 dormant
 start-battle
 general-handler
 flash-out-battle
 fling-fireball
 lightning-blast
 spawn-wave
 dead
 dead-win
 )
)
  

(defstate active (tm-desertc-anchor)
    :virtual #t
    :code 
    (behavior ()
        (let ((vec (new 'static 'vector 
                :x (meters 764.6093) 
                :y (meters 314.2753) 
                :z (meters 1212.6389) 
                :w 1.0
              ))
              (vec2 (new 'static 'vector 
                :x (meters 764.6093) 
                :y (meters 26.2753) 
                :z (meters 1212.6389) 
                :w 1.0
              ))
              (vec3 (new 'static 'vector 
                :x (meters 764.6093) 
                :y (meters 59.7179) 
                :z (meters 1212.6389) 
                :w 1.0
              ))
              (vec4 (new 'static 'vector 
                :x (meters 786.2686) 
                :y (meters 64.1297) 
                :z (meters 1202.4191) 
                :w 1.0
              ))
              )
            (set! (-> self spawn-pos) vec)
            (set! (-> self getoff-bounds) vec2)
            (set! (-> self reward-box) vec3)
            (set! (-> self lightning-pos) vec4)
            (set! (-> self ship-inside?) #f)
            (set! (-> self general-i) 0)
            (set! (-> self wave-max) 11)
            (set! (-> self max-count) 0)
            (set! (-> self waiting?) #f)
            (set! (-> self wave-sp)
                (new 'static
                    'inline-array ;NOT SET YET
                    vector
                    12
                    (static-vectorm 1916.65 23.62 2701.48)
                    (static-vectorm 1883.65 21.42 2750.90)
                    (static-vectorm 1891.54 22.07 2740.75)
                    (static-vectorm 1921.78 23.43 2765.01)
                    (static-vectorm 2000.65 29.69 2806.30)
                    (static-vectorm 2008.37 29.86 2821.89)
                    (static-vectorm 1993.06 29.99 2814.21)
                    (static-vectorm 2009.65 30.36 2740.88)
                    (static-vectorm 2034.21 31.88 2734.43)
                    (static-vectorm 2076.38 34.71 2740.96)
                    (static-vectorm 2067.31 32.89 2765.49)
                    (static-vectorm 2016.61 29.53 2823.34)
                    ;(static-vectorm 2011.11 29.83 2855.87)
                    )
                )
            (when (>= (-> *time-of-day-context* time) 13.0)
                (go-virtual flash-out-battle)
            )
            (when (or
                    (= in-debug? #t)
                    (= anchor-target-dead? #t)
                  )
                (set! (-> self general-i) 1179)
            )
            (loop
                (+! (-> self general-i) 1)
                (cond 
                    ((or 
                            (= (-> (level-get-target-inside *level*) name) 'desert)
                            (= (-> (level-get-target-inside *level*) name) 'desertg)
                            (= (-> (level-get-target-inside *level*) name) 'wasdoors)
                        )
                        (let ((i-i (-> self general-i)))
                            (when (= i-i 1200)
                                (set! in-desertc-anchor? #t)
                                (set! enemy-noto (rand-vu-int-range 42 61))
                            )
                            (when (= i-i 1190)
                                (when (= white-mode #f)
                                    (toggle-white-mode)
                                )
                            )
                            (when (= i-i 1199)
                                (when (= white-mode #t)
                                    (toggle-white-mode)
                                )
                            )
                            (when (>= i-i 1201)
                                (print "~%~%dm-ship SPAWNED~%~%")
                                (go-virtual idle)
                            )
                            (cond 
                                ((and 
                                    (<= (vector-vector-distance (-> self spawn-pos) (target-pos 0)) 4000000.0)
                                    (< (-> self fog-i) 1.0)
                                )
                                    (+! (-> self fog-i) 0.003)
                                    (set! (-> *mood-control* overide-weather-flag) #t)
                                )
                                (else
                                    (set! (-> self fog-i) 1.0)
                                )
                            )
                            (format *stdcon* "~%~%active: general-i = ~D~%fog-i: ~F~%~%" (-> self general-i) (-> self fog-i))
                        )
                    )
                    (
                     *scene-player*
                        (go-virtual dormant)
                    )
                    (else 
                        (go-virtual dormant)
                        (print "~%~%WENT DORMANT, WILL SPAWN ONCE INSIDE LEVEL~%~%")
                    )
                )
                (suspend)
            )
        )
    )
)

(defstate dormant (tm-desertc-anchor) ;jak is not in desert, but the battle occurs
    :virtual #t
    :code
    (behavior ()
        (loop 
            (cond 
                ((and
                    (or 
                        (= (-> (level-get-target-inside *level*) name) 'desert)
                        (= (-> (level-get-target-inside *level*) name) 'desertg)
                        (= (-> (level-get-target-inside *level*) name) 'wasdoors)
                    )
                    (= in-desert-game-task? #f)
                    (not *waste-ship-anchor*)
                    (not *scene-player*)
                )
                    (print "~%~%dm-ship SPAWNED~%~%")
                    (set! in-desertc-anchor? #t)
                    (go-virtual idle)
                )
                (else
                    (when (= in-desertc-anchor? #t)
                        (set! *waste-ship-anchor* #f)
                        (kill-by-name "dm-ship" *default-pool*)
                    )
                )
            )
            (when 
                (>= (-> *time-of-day-context* time) 13.0)
                (go-virtual dead)
            )
            (format *stdcon* "~%tm-desertc-anchor is dormant~%~%")
            (suspend)
        )
    )
)

(defstate idle (tm-desertc-anchor) ;jak is inside of desert, but far away from battle
    :virtual #t
    :code
    (behavior ()
        (set! *waste-ship-anchor* #t)
        (dm-dark-ship (-> self spawn-pos))
        (loop 
            (format *stdcon* "~%tm-desertc-anchor is idle~%~%")
            (when (= in-desert-game-task? #t)
                (go-virtual dormant)
            )
            (when (and
                    (<= (vector-vector-distance (-> self spawn-pos) (target-pos 0)) 3600000.0)
                    (= in-desert-game-task? #f)
                  )
                    (print "~%~%|||||||||||||BATTLE STARTED|||||||||||||~%~%")
                    (set! onfoot-battle? #t)
                    (set! anchor-float-time (-> *time-of-day-context* time))
                    ;;;;;;;;;;;;;;;;;;;;Dark mode;;;;;;;;;;;;;;;;;;;;;
                    (toggle-freeze)
                    (send-event (ppointer->process *time-of-day*) 'change 'hour 19)
                    (set! (-> *time-of-day-context* mode) (the-as time-of-day-palette-id 5))
                    (send-event (ppointer->process *time-of-day*) 'change 'ratio 0.0)
                    (set! (-> *time-of-day-context* overide-enable) #t)
                    (set! (-> *mood-control* overide-weather-flag) #t)
                    (set! (-> *overide-mood-fog-table*
                                        data
                                        (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                        fog-color
                                        x
                                        )
                                    255.0
                                    )
                    (set! (-> *overide-mood-fog-table*
                                        data
                                        (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                        fog-color
                                        y
                                        )
                                    0.0
                                    )
                    (set! (-> *overide-mood-fog-table*
                                        data
                                        (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                        fog-color
                                        z
                                        )
                                    255.0
                                    )
                    (set! (-> *overide-mood-color-table*
                                        data
                                        (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2))
                                        lgt-color
                                        y
                                        )
                                    1.0
                                    )
                    (set! (-> *overide-mood-color-table*
                                        data
                                        (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                        lgt-color
                                        y
                                        )
                                    0.0
                                    )
                    (set! (-> *overide-mood-color-table*
                                        data
                                        (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                        lgt-color
                                        z
                                        )
                                    1.0
                                    )
                    (set! (-> *overide-mood-color-table*
                                        data
                                        (the-as uint (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)))
                                        lgt-color
                                        w
                                        )
                                    1.0
                                    )
                                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    (set! enemy-noto 54)
                    (format *stdcon* "~%tm-desertc-anchor battle started")
                    (go-virtual start-battle)
            )
            (cond 
                ((and
                    (and 
                        (!= (-> (level-get-target-inside *level*) name) 'desert)
                        (!= (-> (level-get-target-inside *level*) name) 'desertg)
                        (!= (-> (level-get-target-inside *level*) name) 'wasdoors)
                    )
                )
                    (go-virtual dormant)
                )
                (else
                    (suspend)
                )
            )
        )
    )
)

(defstate start-battle (tm-desertc-anchor)
    :virtual #t
    :code
    (behavior ()
        (set! (-> self wave) 0)
        (set! (-> self general-i) 0)
        (set! (-> self blast-i) 0)
        (set! (-> self fling-i) 0)
        (set! (-> self fling-max) 15)
        (set! (-> self fireball-pos) (target-pos 0))
        (add-setting! 'music 'desres2 0.0 0)
        (spawn-dust-storm)
        (set-setting! 'dust-storm-sound-scalar #f 10.0 10)
        (send-event (handle->process (-> *game-info* dust-storm)) 'set-intensity 1000)
        (go-virtual general-handler)
    )
)

(defstate general-handler (tm-desertc-anchor)
    :virtual #t
    :code
    (behavior ()
        (loop
            (when (rand-vu-percent? 0.7)
                (+! (-> self blast-i) 1)
            )
            (+! (-> self fling-i) 1)
            (when (>= (-> self blast-i) 800)
                (go-virtual lightning-blast)
            )
            (when (>= (-> self fling-i) (-> self fling-max))
                (go-virtual fling-fireball)
            )
            (cond
                ((> (vector-vector-distance (-> self getoff-bounds) (target-pos 0)) 700000.0) ;force stop pilot at a certain range
                    (set! *force-stop-pilot* #f)
                )
                (else
                    (set! *force-stop-pilot* #t)
                )
            )
            (when (> (vector-vector-distance (-> self spawn-pos) (target-pos 0)) 3800000.0) ;go dormant or idle when out of range
                (set! (-> self general-i) 0)
                (cond 
                    ((and
                            (!= (-> (level-get-target-inside *level*) name) 'desert)
                            (!= (-> (level-get-target-inside *level*) name) 'desertg)
                            (!= (-> (level-get-target-inside *level*) name) 'wasdoors)
                        )
                        (go-virtual dormant)
                    )
                    (else
                        (go-virtual flash-out-battle)
                    )
                )
            )
            #|(when (and ;spawn enemies below ship
                    (< (vector-vector-distance (-> self getoff-bounds) (target-pos 0)) 900000.0)
                    (not (search-process-tree *active-pool* (lambda ((p process)) (type? p dp-bipedal))))
                    (not (search-process-tree *active-pool* (lambda ((p process)) (type? p marauder))))
                    (not (search-process-tree *active-pool* (lambda ((p process)) (type? p neo-wasp))))
                  )
                  (set! (-> self spawn-count) 0)
                  (set! (-> self boss-spawned?) #f)
                  (+! (-> self wave) 1)
                  (format #t "~%~%NEW WAVE~%~%~D" (-> self wave))
                  (go-virtual spawn-wave)
            )|#
            (when 
                (and 
                    (= weather-dark-mode #t)
                    (not *scene-player*)
                    (= (paused?) #f)
                    (= (pause-allowed?) #t)
                    (not (km-current-continue "wasdoors-city" (the-as debug-menu-msg #f)))
                )
                (set-continue! *game-info* "wasdoors-city" #t)
            )
            (format *stdcon* "~%general-handler: blast-i = ~D/800~%general-handler: fling-i = ~D/~D~%~%general-handler: wave = ~D/11~%" (-> self blast-i) (-> self fling-i) (-> self fling-max) (-> self wave))
            (suspend)
        )
    )
)

(defstate lightning-blast (tm-desertc-anchor)
    :virtual #t
    :code
    (behavior ()
        (set! (-> self general-i) 0)
        (loop
            (let ((gp-0 (-> self spawn-pos)))
            (let ((a1-2 (new 'stack-no-clear 'projectile-init-by-other-params)))
                (set! (-> a1-2 ent) (the-as entity #f))
                (set! (-> a1-2 charge) 1.0)
                (set! (-> a1-2 options) (projectile-options))
                (logclear! (-> a1-2 options) (projectile-options po14 po15 po16))
                (set! (-> a1-2 pos quad) (-> self spawn-pos quad))
                (set! (-> a1-2 vel quad) (-> (new 'static 'vector :x 1.0) quad))
                (set! (-> a1-2 notify-handle) (the-as handle #f))
                (set! (-> a1-2 owner-handle) (the-as handle #f))
                (set! (-> a1-2 target-handle) (the-as handle #f))
                (set! (-> a1-2 target-pos quad) (the-as uint128 0))
                (set! (-> a1-2 ignore-handle) (the-as handle #f))
                (let* ((v1-15 *game-info*)
                    (a0-17 (+ (-> v1-15 attack-id) 1))
                    )
                (set! (-> v1-15 attack-id) a0-17)
                (set! (-> a1-2 attack-id) a0-17)
                )
                (set! (-> a1-2 timeout) (seconds 4))
                (spawn-projectile terraformer-head-laser-projectile a1-2 self *default-dead-pool*)
            )
            (let ((a2-2 (new 'stack-no-clear 'vector)))
            (vector-! a2-2 (-> self lightning-pos) gp-0)
            (set! (-> *part-id-table* 9164 init-specs 4 initial-valuef) (vector-length a2-2))
            (draw-beam (-> *part-id-table* 9164) gp-0 a2-2 #f)
            )
            (launch-particles (-> *part-id-table* 9166) (-> self lightning-pos))
            (let ((s5-1 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> self lightning-pos) gp-0) 1.0)))
                (let ((s4-0 (new 'stack-no-clear 'vector)))
                    (if *target*
                        (vector-! s4-0 (get-trans *target* 3) gp-0)
                    )
                (vector+float*! s5-1 gp-0 s5-1 (vector-dot s5-1 s4-0))
                )
            )
            )
            (+! (-> self general-i) 1)
            (when (>= (-> self general-i) 300)
                (set! (-> self fireball-pos) (target-pos 0))
                (set! (-> self blast-i) 0)
                ;put explosion and damage-sphere here
                (go-virtual general-handler)
            )
            (format *stdcon* "~%lightning-blast: general-i = ~D/300~%~%" (-> self general-i))
            (suspend)
        )
    )
)

(defstate fling-fireball (tm-desertc-anchor)
    :virtual #t
    :code
    (behavior ()
        (set! (-> self general-i) 0)
        (loop
            (+! (-> self general-i) 1)
            (when (>= (-> self general-i) 30)
                (let ((rnd (rand-vu-int-range 1 14))
                      (rnd2 (rand-vu-float-range -30.0 30.0))
                      (rnd3 (rand-vu-float-range -30.0 30.0))
                      (vec (new-stack-vector0))
                      (startpos (new-stack-vector0))
                      (plusvec (new-stack-vector0)) 
                      (off (new 'static 'vector :x (meters 0.0) :y (meters 0.0) :z (meters 0.0) :w 1.0))  
                     )
                    (set! off (new 'static 'vector :x (meters 0.0) :y (meters 0.0) :z (meters 0.0) :w 1.0))
                    (set! plusvec (new 'static 'vector :x (meters 0.0) :y (meters 0.0) :z (meters 0.0) :w 1.0))
                    (set! vec (new 'static 'vector :x (meters 0.0) :y (meters 0.0) :z (meters 0.0) :w 1.0))
                    (set! startpos (-> self fireball-pos))
                    (if (rand-vu-percent? 0.5)
                        (+! (-> off x) (* (rand-vu-float-range 0.0 100.0) 4096.0))
                        (-! (-> off x) (* (rand-vu-float-range 0.0 100.0) 4096.0))
                    )
                    (if (rand-vu-percent? 0.5)
                        (+! (-> off z) (* (rand-vu-float-range 0.0 100.0) 4096.0))
                        (-! (-> off z) (* (rand-vu-float-range 0.0 100.0) 4096.0))
                    )
                    (set! vec (-> self spawn-pos)) ;was (set! vec (-> self fireball-sp (rand-vu-int-range 1 27)))
                    (vector-copy! plusvec (vector+! plusvec off vec))
                    (set! startpos plusvec)
                    (set! (-> startpos y) -200000.0)
                    (spawn-fireball vec startpos (rand-vu-float-range -255000.0 255000.0))
                )
                (set! (-> self fling-i) 0)
                (set! (-> self fling-max) (rand-vu-int-range 7 30))
                (go-virtual general-handler)
            )
        )
    )
)

(defstate spawn-wave (tm-desertc-anchor)
    :virtual #t
    :code
    (behavior ()
        (set! (-> self max-count) 7);(set! (-> self max-count) (rand-vu-int-range 4 12))
        (loop
            (when (= (-> self waiting?) #t)
                    (+! (-> self wait-i) 1)
                    (when (>= (-> self wait-i) 60)
                        (set! (-> self waiting?) #f)
                        (set! (-> self wait-i) 0)
                    )
                )
            (when (= (-> self waiting?) #f)
                (let ((vec (new-stack-vector0))
                    )
                    (set! vec (-> self wave-sp (rand-vu-int-range 0 11)))
                    #|(when (<= (vector-vector-distance (target-pos 0) vec) 270000.0)
                        (spawn-dark-maker vec)
                        (+! (-> self spawn-count) 1)
                    )|#
                    (when
                        (or
                            (= (-> self wave) 3)
                            (= (-> self wave) 8)
                        )
                        (spawn-dark-boss vec)
                        (+! (-> self spawn-count) (-> self max-count))
                        (set! (-> self boss-spawned?) #t)
                        (suspend)
                    )
                    (when (and 
                            (< (-> self spawn-count) (-> self max-count))
                            (!= (-> self wave) 3)
                            (!= (-> self wave) 8)
                          )
                        (spawn-dark-maker vec)
                        (+! (-> self spawn-count) 1)
                    )
                    (when (>= (-> self spawn-count) (-> self max-count))
                        (when (>= (-> self wave) (-> self wave-max))
                            (go-virtual flash-out-battle)
                        )
                        (go-virtual general-handler)
                    )
                    (set! (-> self waiting?) #t)
                )
            )
            (suspend)
        )
    )
)

(defstate flash-out-battle (tm-desertc-anchor)
    :virtual #t
    :code
    (behavior ()
        (set! *force-stop-pilot* #f)
        (kill-by-name "dp-bipedal-c" *default-pool*)
        (kill-by-name "Bipedal Boss" *default-pool*)
        (kill-by-name "v-catapult-shot" *active-pool*)
        (set! (-> self general-f) 0.0)
        (loop
            (+! (-> self general-f) 0.1)
            (when (< (-> self general-f) 72.0)
                (send-event (ppointer->process *time-of-day*) 'change 'ratio (-> self general-f))
            )
            (when 
                (and 
                    (>= (-> *time-of-day-context* time) anchor-float-time)
                    (< (-> *time-of-day-context* time) (+ anchor-float-time 0.3))
                    (>= (-> self general-f) 72.0)
                )
                (set! onfoot-battle? #f)
                (send-event (ppointer->process *time-of-day*) 'change 'ratio 1.0)
                (if (or
                        (>= (-> self wave) (-> self wave-max))
                        (>= anchor-float-time 13.0)
                    )
                    (go-virtual dead-win)
                    (go-virtual idle)
                )
            )
            (suspend)
        )
    )
)

(defstate dead-win (tm-desertc-anchor)
    :virtual #t
    :code
    (behavior ()
        (set! (-> self general-i) 0)
        (loop
            (+! (-> self general-i) 1)
            (when (= (-> self general-i) 1)
                (toggle-white-mode)
            )
            (when (= (-> self general-i) 10)
                (toggle-white-mode)
                (kill-by-name "dm-ship" *default-pool*)
                (set! in-desertc-anchor? #f)
                (set! *force-stop-pilot* #f)
                (task-node-open! (game-task-node desertf-anchor-introduction) #t)
                (let ((vec (new 'static 'vector :x (meters 1960.3009) :y (meters 27.3126) :z (meters 2778.7351) :w 1.0))
                  (rnd 1))
                (when (rand-vu-percent? 0.3)
                    (set! rnd 2)
                )
                (when (rand-vu-percent? 0.12)
                    (set! rnd 3)
                )
                (drop-crate vec rnd)
                (set! anchor-cdr 0)
                (set! anchor-cooldown #t)
                (go-virtual dead)
            )
            )
            (suspend)
        )
    )
)

(defstate dead (tm-desertc-anchor)
    :virtual #t
    :code
    (behavior ()
        (task-node-open! (game-task-node desertf-anchor-introduction) #t)
        (set! *force-stop-pilot* #f)
        (kill-by-name "dp-bipedal-c" *default-pool*)
        (kill-by-name "v-catapult-shot" *active-pool*)
        (kill-by-name "Bipedal Boss" *default-pool*)
        (kill-by-name "dm-ship" *default-pool*)
        (suspend)
    )
)

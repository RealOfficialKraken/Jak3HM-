;Lisp
(in-package goal)

;name: xp-level.gc

#|
(when 
        (and
            (= (/ (mod (-> *game-info* auto-save-count) 100000) 10000) 3)
            
        )

    )
    |#

    (define draw-levelup-int 0)
    (define xp-bar-spawned? #f)

(defun level-up! ((arg0 int))
    (+! (-> *game-info* total-trys) arg0)
    (set! (-> *game-info* karma) extra-offthetop)
    (set! draw-levelup-noto #t)
    (set! noto-string "<COLOR_ORANGE>Notoriety<COLOR_YELLOW>")
    (set! draw-levelup-int (-> *game-info* total-trys))
    (none)
)

(defun level-up-guns! ((arg0 int))
    (+! (-> *game-info* auto-save-count) arg0)
    (+! (-> *game-info* karma) (/ extra-offthetop 2))
    (set! (-> *game-info* buzzer-total) extra-offthetop)
    (set! draw-levelup-noto #t)
    (set! noto-string "<COLOR_RED>Guns<COLOR_YELLOW>")
    (set! draw-levelup-int (-> *game-info* auto-save-count))
    (none)
)

(defun level-up-cars! ((arg0 int))
    (+! (-> *game-info* total-deaths) arg0)
    (when (!= (-> *game-info* total-deaths) 1)
        (set! (-> *game-info* fuel) extra-offthetop)
        (+! (-> *game-info* karma) (/ extra-offthetop 2))
    )
    (set! draw-levelup-noto #t)
    (set! noto-string "<COLOR_PINK>Vehicle<COLOR_YELLOW>")
    (set! draw-levelup-int (-> *game-info* total-deaths))
    (none)
)

(defun vehicle-killed? ((xp-gain float))
    (+! (-> *game-info* fuel) (/ (* xp-gain enemy-noto) 2))
    (+! (-> *game-info* karma) (/ (* xp-gain enemy-noto) 4))
    (set! xp-string "Marauder Killed")
    (set! *xp-gain* (/ (* xp-gain enemy-noto) 4))
    (set! xp-draw #t)
    (set! xpi 0)
    (none)
)

(defun mod-killed? ((xp-gain float))
    (+! (-> *game-info* fuel) (* xp-gain enemy-noto))
    (set! xp-string "Duplicate Gunmod turned to Vehicle XP")
    (set! *xp-gain* (* xp-gain enemy-noto))
    (set! xp-draw #t)
    (set! xpi 0)
    (none)
)

(defun enemy-killed? ((xp-gain float))
    (+! (-> *game-info* karma) (/ (* xp-gain enemy-noto) 1.5))
    (set! xp-string "Enemy Killed")
    (set! *xp-gain* (/ (* xp-gain enemy-noto) 1.5))
    (set! xp-draw #t)
    (set! xpi 0)
    (none)
)

(defun collect-orb-xp! ((xp-gain float))
    (+! (-> *game-info* karma) (/ (* xp-gain enemy-noto) 3.5))
    (set! xp-string "Orb Collected")
    (set! *xp-gain* (/ (* xp-gain enemy-noto) 3.5))
    (set! xp-draw #t)
    (set! xpi 0)
    (none)
)



(defun draw-XP-bar ()
(when 
    (and
        *target*
        (not *scene-player*)
        (= (paused?) #f)
        (= (pause-allowed?) #t)
    )
    
    )
    ;;;;;;;;;;;;;;;;;;;;;;;;;Notoriety;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (when 
        (or 
            (= in-menu? #f)
            (and
                (= in-skill? #t)
                (= menu-slot 0)
            )
        )
        (let 
            (
                (x noto-draw-x)
                (y noto-draw-y)
                (progress level-percent)
                (arg3 (new 'static 'rgba 
                    :r 255
                    :g 255
                    :b 0
                    :a #x40
                    )
                    )
            )
                (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                    (bucket-id particles)
                                    )
            (draw-sprite2d-xy s2-0 x y 125 6 (new 'static 'rgba :a (-> arg3 a)) #x3fffff)
            (draw-sprite2d-xy s2-0 (+ x 1) (+ y 1) (the int (* 123.0 progress)) 4 arg3 #x3fffff)
            )

            (let (
                    (level-cap (the float (* (+ (* notoriety-level 60) (* notoriety-level 100)) notoriety-level)))
                    (arg1 (-> *game-info* karma))
                    )
                        (when (!= level-percent (/ arg1 level-cap))
                            (set! level-percent (/ arg1 level-cap))
                        )
                    )
            )
    )
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Guns;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(when 
        (or 
            (= in-menu? #f)
            (and
                (= in-skill? #t)
                (= menu-slot 1)
            )
        )
        (when (task-node-closed? (game-task-node arena-fight-1-introduction))
            (let 
            (
                (x guns-draw-x)
                (y guns-draw-y)
                (progress guns-percent)
                (arg3 (new 'static 'rgba 
                    :r 255
                    :g 1
                    :b 0
                    :a #x40
                    )
                    )
            )
                (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                    (bucket-id particles)
                                    )
            (draw-sprite2d-xy s2-0 x y 125 6 (new 'static 'rgba :a (-> arg3 a)) #x3fffff)
            (draw-sprite2d-xy s2-0 (+ x 1) (+ y 1) (the int (* 123.0 progress)) 4 arg3 #x3fffff)
            )

            (let (
                    (level-cap (the float (* (+ (* guns-level 120) (* guns-level 200)) guns-level)))
                    (arg1 (the float (-> *game-info* buzzer-total)))
                    )
                        (when (!= guns-percent (/ arg1 level-cap))
                            (set! guns-percent (/ arg1 level-cap))
                        )
                    )
            )
        )
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Vehicles;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(when 
        (or 
            (= in-menu? #f)
            (and
                (= in-skill? #t)
                (= menu-slot 2)
            )
        )
        (when (!= (-> *game-info* total-deaths) 0)
            (let 
            (
                (x car-draw-x)
                (y car-draw-y)
                (progress vehicle-percent)
                (arg3 (new 'static 'rgba 
                    :r 255
                    :g 0
                    :b 255
                    :a #x40
                    )
                    )
            )
                (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                    (bucket-id particles)
                                    )
            (draw-sprite2d-xy s2-0 x y 125 6 (new 'static 'rgba :a (-> arg3 a)) #x3fffff)
            (draw-sprite2d-xy s2-0 (+ x 1) (+ y 1) (the int (* 123.0 progress)) 4 arg3 #x3fffff)
            )

            (let (
                    (level-cap (the float (* (+ (* cars-level 30) (* cars-level 175)) cars-level)))
                    (arg1 (-> *game-info* fuel))
                    )
                        (when (!= vehicle-percent (/ arg1 level-cap))
                            (set! vehicle-percent (/ arg1 level-cap))
                        )
                    )
            )
        )
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (none)
  )

(defun update-xp! ()

    (when 
        (!= notoriety-level (-> *game-info* total-trys))
            (set! notoriety-level (-> *game-info* total-trys))
    )
    (when ;bind total-trys and notoriety-level together as a game-save stat
        (!= guns-level (-> *game-info* auto-save-count))
            (set! guns-level (-> *game-info* auto-save-count))
        )
    (when (and
            (!= cars-level (-> *game-info* total-deaths))
            (!= (-> *game-info* total-deaths) 0)
        )
            (set! cars-level (-> *game-info* total-deaths))
    )
    (when ;level up parameters NOTO
        (and
            (>= (-> *game-info* karma) (* (+ (* notoriety-level 60) (* notoriety-level 100)) notoriety-level))
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (!= (-> *game-info* karma) 0.0)
            (!= notoriety-level 0)
        )
            (set! extra-offthetop (- (-> *game-info* karma) (* (+ (* notoriety-level 60) (* notoriety-level 100)) notoriety-level)))
            (level-up! 1)
        )

        (when ;level up parameters GUNS
        (and
            (>= (-> *game-info* buzzer-total) (* (+ (* guns-level 120) (* guns-level 200)) guns-level))
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (!= (-> *game-info* buzzer-total) 0.0)
            (!= guns-level 0)
        )
            (set! extra-offthetop (- (-> *game-info* buzzer-total) (* (+ (* guns-level 120) (* guns-level 200)) guns-level)))
            (level-up-guns! 1)
        )

        (when ;level up parameters CARS
        (and
            (>= (-> *game-info* fuel) (* (+ (* cars-level 30) (* cars-level 175)) cars-level))
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (!= (-> *game-info* fuel) 0.0)
            (!= guns-level 0)
        )
            (set! extra-offthetop (- (-> *game-info* fuel) (* (+ (* cars-level 30) (* cars-level 175)) cars-level)))
            (level-up-cars! 1)
        )

        (when 
            (and
                *target*
                (not *scene-player*)
                (= (paused?) #f)
                (= (pause-allowed?) #t)
                (task-node-closed? (game-task-node arena-training-1-introduction))
                (not (task-node-closed? (game-task-node arena-training-1-collect)))
                (= (-> *game-info* karma) (the int 65))
            )
                (set! (-> *game-info* karma) 0.0)
            )

        (when (= enemy-hp #t)
            (+! hpi 1)
                (let (
                    (color-string "<COLOR_WHITE>") ;color tags for levels
                    )
                    (when (and  
                                (< enemy-noto (+ notoriety-level 3))
                                (> enemy-noto (- notoriety-level 3))
                                (not (string= color-string "<COLOR_YELLOW>"))
                            )
                                (set! color-string "<COLOR_YELLOW>")
                            )
                            (when (and  
                                (>= enemy-noto (+ notoriety-level 3))
                                (not (string= color-string "<COLOR_RED>"))
                            )
                                (set! color-string "<COLOR_RED>")
                            )
                            (when (and  
                                (< enemy-noto (- notoriety-level 3))
                                (> enemy-noto (- notoriety-level 7))
                                (not (string= color-string "<COLOR_GREEN>"))
                            )
                                (set! color-string "<COLOR_GREEN>")
                            )
                            (when (and  
                                (< enemy-noto (- notoriety-level 7))
                                (not (string= color-string "<COLOR_BROWN>"))
                            )
                                (set! color-string "<COLOR_TRANSPARENT>")
                            )
                (when 
                (and
                    *target*
                    (not *scene-player*)
                    (= (paused?) #f)
                    (= (pause-allowed?) #t)
                    (= in-menu? #f)
                )
                (let ((health-pos 0))
                    (when (= hud-timer-on? #f)
                        (set! health-pos 10)
                    )
                    (when (or (= hud-timer-on? #t) (= r3-noto #t))
                        (set! health-pos 80)
                    )
                    (clear matt-str)
                    (clear *pc-encoded-matt-str*)
                    (format matt-str "~s~%~%<COLOR_WHITE>Lv. ~s~d"
                    enemy-string
                    color-string
                    enemy-noto
                    )
                    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
                    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
                    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
                    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 health-pos 0.0 (font-color default) (font-flags middle shadow kerning large))))
                    (set! (-> font-ctx scale) 0.325)
                    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
                )
                (let (
                            (level-cap hpbar-max-hit-points)
                            (arg1 hpbar-hit-points)
                            )
                                (when (!= enemy-hp-percent (/ arg1 level-cap))
                                    (set! enemy-hp-percent (/ arg1 level-cap))
                                )
                                (when (< level-cap arg1)
                                    (set! arg1 0.0)
                                )
                            )
                (let 
                    (
                        (x 100)
                        (y 21)
                        (progress enemy-hp-percent) ;enemy-hp-percent
                        (arg3 (new 'static 'rgba 
                            :r 255
                            :g 0
                            :b 0
                            :a #x40
                            )
                            )
                    )
                        (when (or (= hud-timer-on? #t) (= r3-noto #t))
                            (set! y 90)
                        )
                        (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                            (bucket-id particles)
                                            )
                    (draw-sprite2d-xy s2-0 x y 310 8 (new 'static 'rgba :a (-> arg3 a)) #x3fffff)
                    (draw-sprite2d-xy s2-0 (+ x 1) (+ y 1) (the int (* 310.0 progress)) 6 arg3 #x3fffff)
                    )

                    )
            )
                (when (= hpi 400)
                    (set! hpi 0)
                    (set! enemy-hp #f)
                )
            )
        )


        ;level based enemy-levels

        (when ;WASCITYA
            (and
                (= (-> (level-get-target-inside *level*) name) 'wascitya)
                (!= enemy-noto 1)
            )
            (set! enemy-noto 1)
        )
        (when ;WASCITYB
            (and
                (= (-> (level-get-target-inside *level*) name) 'wascityb)
                (not (task-node-open? (game-task-node wascity-pre-game-resolution)))
                (!= enemy-noto 2)
            )
            (set! enemy-noto 2)
        )
        (when ;ARENA FIGHT 1
            (and
                (task-node-open? (game-task-node arena-fight-1-fight))
                (!= enemy-noto 1)
            )
            (set! enemy-noto 1)
        )
        (when ;ARENA FIGHT 2
            (and
                (task-node-open? (game-task-node arena-fight-2-fight))
                (!= enemy-noto notoriety-level)
            )
            (set! enemy-noto (+ notoriety-level 3))
        )
        (when ;ARENA FIGHT 3
            (and
                (task-node-open? (game-task-node arena-fight-3-fight))
                (!= enemy-noto (+ notoriety-level 10))
            )
            (set! enemy-noto (+ notoriety-level 10))
        )
        (when ;DESERT
            (and
                (= (-> (level-get-target-inside *level*) name) 'desert)
                (= in-satbattle? #f)
                (!= enemy-noto notoriety-level)
                (= start-was-uprising #f)
            )
            (when (>= notoriety-level 3)
                (set! enemy-noto (- notoriety-level 2))
                (set! start-was-uprising #t)
                (set! wasi 0)
            )
            (when (< notoriety-level 3)
                (set! enemy-noto notoriety-level)
            )
        )
        (when ;VOLCANOA
            (and
                (= (-> (level-get-target-inside *level*) name) 'volcanoa)
                (!= enemy-noto 8)
            )
            (set! enemy-noto 8)
        )
        (when ;VOLCANOB
            (and
                (= (-> (level-get-target-inside *level*) name) 'volcanob)
                (!= enemy-noto 9)
            )
            (set! enemy-noto 9)
        )
        (when ;TEMPLEA
            (and
                (= (-> (level-get-target-inside *level*) name) 'templea)
                (!= enemy-noto 11)
            )
            (set! enemy-noto 11)
        )
        (when ;TEMPLEB
            (and
                (= (-> (level-get-target-inside *level*) name) 'templeb)
                (!= enemy-noto 14)
            )
            (set! enemy-noto 14)
        )
        (when ;MINE
            (and
                (or 
                    (= (-> (level-get-target-inside *level*) name) 'minea)
                    (= (-> (level-get-target-inside *level*) name) 'mineb)
                    (= (-> (level-get-target-inside *level*) name) 'minec)
                )
                (and
                    (!= enemy-noto 15)
                    (!= enemy-noto 16)
                    (!= enemy-noto 17)
                    (!= enemy-noto 18)
                )
            )
            (set! enemy-noto (rand-vu-int-range 15 18))
        )
        (when ;CTYGENB
            (and
                (= (-> (level-get-target-inside *level*) name) 'ctygenb)
                (!= enemy-noto 17)
            )
            (set! enemy-noto 17)
        )
        (when ;SEW1
            (and
                (= (-> (level-get-target-inside *level*) name) 'sewa)
                (!= enemy-noto 18)
                (!= enemy-noto 19)
            )
            (set! enemy-noto (rand-vu-int-range 18 19))
        )
        (when ;ctyport
            (and
                (= (-> (level-get-target-inside *level*) name) 'ctyport)
                (!= enemy-noto 19)
                (!= enemy-noto 20)
            )
            (set! enemy-noto (rand-vu-int-range 19 20))
        )
        (when ;ctyinda
            (and
                (= (-> (level-get-target-inside *level*) name) 'ctyinda)
                (!= enemy-noto 21)
                (!= enemy-noto 22)
            )
            (set! enemy-noto (rand-vu-int-range 21 22))
        )
        (when ;ctyindb
            (and
                (= (-> (level-get-target-inside *level*) name) 'ctyindb)
                (!= enemy-noto 23)
                (!= enemy-noto 24)
                (!= enemy-noto 25)
                (!= enemy-noto 26)
                (!= enemy-noto 27)
                (!= enemy-noto 28)
            )
            (set! enemy-noto (rand-vu-int-range 23 28))
        )
        (when ;ctysluma
            (and
                (= (-> (level-get-target-inside *level*) name) 'ctysluma)
                (= (-> (level-get-target-inside *level*) name) 'ctyslumb)
                (= (-> (level-get-target-inside *level*) name) 'ctyslumc)
                (!= enemy-noto 29)
                (!= enemy-noto 30)
                (!= enemy-noto 31)
                (!= enemy-noto 32)
                (!= enemy-noto 33)
                (!= enemy-noto 34)
            )
            (set! enemy-noto (rand-vu-int-range 29 34))
        )
        (when ;mhcitya+mhcityb
            (and
                (or
                    (= (-> (level-get-target-inside *level*) name) 'mhcitya)
                    (= (-> (level-get-target-inside *level*) name) 'mhcityb)
                )
                (!= enemy-noto 23)
                (!= enemy-noto 24)
                (!= enemy-noto 25)
                (!= enemy-noto 26)
                (!= enemy-noto 27)
                (!= enemy-noto 28)
            )
            (set! enemy-noto (rand-vu-int-range 23 28))
        )

        (when 
        (and 
            (= start-was-uprising #t)
            (= (-> (level-get-target-inside *level*) name) 'desert)
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
        )
            (+! wasi 1)
            (when (= wasi 3000)
                (+! enemy-noto 1)
                (set! wasi 0)
            )
        )

        (when 
            (and
                (!= (-> (level-get-target-inside *level*) name) 'desert)
                (= start-was-uprising #t)
            )
                (set! wasi 0)
                (set! start-was-uprising #f)
            )


    (when 
        (and 
            (= xp-draw #t)
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
        ) ;gain XP
        (+! xpi 1)
        (when (= xpi 45)
            (set! xpi 0)
            (set! xp-draw #f)
        )
        (let ((y 50))
            (when (= hud-timer-on? #f)
                        (set! y 50)
                    )
                    (when (or (= hud-timer-on? #t) (= r3-noto #t))
                        (set! y 120)
                    )
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "~s~%<COLOR_CYAN>+~d"
            xp-string
            (the int *xp-gain*)
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 y 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
    )

    (when (= draw-levelup-noto #t) ;Level Up
        (+! lvli 1)
        (when (= lvli 600)
            (set! lvli 0)
            (set! draw-levelup-noto #f)
        )
        (when 
            (and
                *target*
                (not *scene-player*)
                (= (paused?) #f)
                (= (pause-allowed?) #t)
                (= in-menu? #f)
            )
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_GREEN>LEVEL UP!~%~%~s Level ~d"
            noto-string
            draw-levelup-int
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 150 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
    )
    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (cpad-pressed? 0 l3)
            (= r3-noto #f)
        )
        (set! r3-noto #t)
        (set! anim-noto -20)
        (set! notoi 0)
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (cpad-pressed? 0 l3)
            (= r3-noto #t)
            (> notoi 22)
        )
        (set! notoi 22)
        (set! anim-noto 1)
    )

    (when
        (and
            *target*
            (not *scene-player*)
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (= r3-noto #t)
        )
            (+! notoi 1)
            (when (and (>= notoi 1)(<= notoi 21))
                (+! anim-noto 1)
            )
            (when (and (> notoi 21) (< notoi 353))
                (draw-XP-bar)
                (set! noto-draw-x 190)
                (set! noto-draw-y 11)
                (set! guns-draw-x 30)
                (set! guns-draw-y 11)
                (set! car-draw-x 350)
                (set! car-draw-y 11)
            )
            (when (>= notoi 370)
                (-! anim-noto 1)
            )
            (when (or (= notoi 390)(= in-menu? #t))
                (set! notoi 0)
                (set! anim-noto -30)
                (set! r3-noto #f)
                (set! xp-bar-spawned? #f)
            )
        )

    (when ;draw the notoriety level onscreen
    (and
        *target*
        (not *scene-player*)
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (= r3-noto #t)
        (= in-menu? #f)
    )
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Notoriety: ~d~%~%<COLOR_YELLOW>~d/~d"
        notoriety-level
        (the int (-> *game-info* karma))
        (the int (* (+ (* notoriety-level 60) (* notoriety-level 100)) notoriety-level))
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 anim-noto 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when ;draw the guns level onscreen
    (and
        *target*
        (not *scene-player*)
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (= r3-noto #t)
        (= in-menu? #f)
        (task-node-closed? (game-task-node arena-fight-1-introduction))
    )
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>Guns: ~d~%~%<COLOR_RED>~d/~d"
        guns-level
        (the int (-> *game-info* buzzer-total))
        (the int (* (+ (* guns-level 120) (* guns-level 200)) guns-level))
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 90 anim-noto 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when ;draw the cars level onscreen
    (and
        *target*
        (not *scene-player*)
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (= r3-noto #t)
        (= in-menu? #f)
        (!= (-> *game-info* total-deaths) 0)
    )
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_PINK>Vehicles: ~d~%~%<COLOR_PINK>~d/~d"
        cars-level
        (the int (-> *game-info* fuel))
        (the int (* (+ (* cars-level 30) (* cars-level 175)) cars-level))
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 410 anim-noto 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when (focus-test? *target* pilot) ;for the turbo meter, also referenced in wvehicle.gc and wvehicle-util.gc
            (let 
            (
                (x 7)
                (y 348)
                (progress turbo-amount-hud) ;turbo-amount-hud
                (arg3 (new 'static 'rgba 
                    :r 255
                    :g 0
                    :b 155
                    :a #x40
                    )
                    )
            )
                (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                    (bucket-id particles)
                                    )
            (draw-sprite2d-xy s2-0 x y 63 14 (new 'static 'rgba :a (-> arg3 a)) #x3fffff)
            (draw-sprite2d-xy s2-0 (+ x 1) (+ y 1) (the int (* 61.0 progress)) 12 arg3 #x3fffff)
            )
        )
        
    )

    (none)
)
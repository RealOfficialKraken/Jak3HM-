;;-*-Lisp-*-
(in-package goal)

;; name: jak3-custom-code.gc

#|IDEAS TO IMPLEMENT

Desert POI's
---------------------------------------------------------------
- Add a battle sequence that jak happens upon with wastelanders.
Each encounter will be a random count for enemies, with the last
one being incredibly strong. It will then give a lot of XP and 
potentially a weapon

- Custom bosses will be scattered around the desert in specific spots.
All of these bosses are different from neo-sat, instead they are
recolored, rescaled, entities from Jak 3.

- Make a custom boss sequence with maker towards the end, 
called planetboss. They can be fought in the desert on foot.
You will face one at the end of Jak 3's story, just Before
Jak climbs up for errol fight. Jak can also fight planetboss
by wandering the desert while over notoriety-level 75.
They are the only creatures that drop gun-mods, which 
are overpowered upgrades for all weapons. The Beam Reflexor
is included in the drop pool for this.

- All of these will occur while (= in-desert-game-task? #t)

---------------------------------------------------------------
Random Desert Storm Occurances
---------------------------------------------------------------
- The wasteland will have a dynamic storm timer that happens on 
occasion, and will do damage to jak's vehicle and jak if hes out
of the vehicle.

- Before the storm arrives, there's a timer that warns jak to find
a safe space. This will not occur while (= in-desert-game-task? #t)

---------------------------------------------------------------



|#
(defun-extern level-up! int none)
(defun-extern level-up-guns! int none)
(defun-extern level-up-cars! int none)

(define menu-unlocked? #f)


(defun camera-locked ((draw? symbol) (grab? symbol))
  (send-event *target* 'draw draw?)
  (when (= grab? #t)
    (set-setting-by-param *setting-control* 'mode-name 'cam-eye 0 0)
  )
  (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
  (process-grab? *target* #f)
  (set! camera-locked? #t)
(none)
)

(defun camera-unlocked ()
  (remove-setting-by-arg0 *setting-control* 'mode-name)
  (send-event *target* 'draw #t)
  (process-release? *target*)
  (set! camera-locked? #f)
(none)
)

(defun roll-modifierg ()
(let ((rnd (rand-vu-int-range 1 max-modg)))
(when (= rnd 1)
    (set! (-> *game-info* continue-deaths) 1)
)
(when (= rnd 2)
    (set! (-> *game-info* continue-deaths) 2)
)
(when (= rnd 3)
    (set! (-> *game-info* continue-deaths) 3)
)
(when (= rnd 4)
    (set! (-> *game-info* continue-deaths) 4)
)
(when (= rnd 5)
    (set! (-> *game-info* continue-deaths) 5)
)
(when (= rnd 6)
    (set! (-> *game-info* continue-deaths) 6)
)
(when (= rnd 7)
    (set! (-> *game-info* continue-deaths) 7)
)
(when (= rnd 8)
    (set! (-> *game-info* continue-deaths) 8)
)
(when (= rnd 9)
    (set! (-> *game-info* continue-deaths) 9)
)
(when (= rnd 10)
    (set! (-> *game-info* continue-deaths) 10)
)
(when (= rnd 11)
    (set! (-> *game-info* continue-deaths) 11)
)
(when (= rnd 12)
    (set! (-> *game-info* continue-deaths) 12)
)
(when (= rnd 13)
    (set! (-> *game-info* continue-deaths) 13)
)
(when (= rnd 14)
    (set! (-> *game-info* continue-deaths) 14)
)
(when (= rnd 15)
    (set! (-> *game-info* continue-deaths) 15)
)

)
(none)
)

(defun roll-modifierb ()
(let ((rnd (rand-vu-int-range 1 max-modb)))
(when (= rnd 1)
    (set! (-> *game-info* task-deaths) 1)
)
(when (= rnd 2)
    (set! (-> *game-info* task-deaths) 2)
)
(when (= rnd 3)
    (set! (-> *game-info* task-deaths) 3)
)
(when (= rnd 4)
    (set! (-> *game-info* task-deaths) 4)
)
(when (= rnd 5)
    (set! (-> *game-info* task-deaths) 5)
)
(when (= rnd 6)
    (set! (-> *game-info* task-deaths) 6)
)
(when (= rnd 7)
    (set! (-> *game-info* task-deaths) 7)
)
(when (= rnd 8)
    (set! (-> *game-info* task-deaths) 8)
)
(when (= rnd 9)
    (set! (-> *game-info* task-deaths) 9)
)
(when (= rnd 10)
    (set! (-> *game-info* task-deaths) 10)
)
(when (= rnd 11)
    (set! (-> *game-info* task-deaths) 11)
)
(when (= rnd 12)
    (set! (-> *game-info* task-deaths) 12)
)
(when (= rnd 13)
    (set! (-> *game-info* task-deaths) 13)
)
(when (= rnd 14)
    (set! (-> *game-info* task-deaths) 14)
)
(when (= rnd 15)
    (set! (-> *game-info* task-deaths) 15)
)

)
(none)
)

(defun runs-jak3-every-frame () ;;START RUNNING EVERY FRAME

(when (and (= menu-unlocked? #f) (task-node-closed? (game-task-node arena-fight-1-resolution)))
    (set! menu-unlocked? #t)
)

(when (= uni-count1 #t)
    (+! uni 1)
    (when (= uni 30)
        (set! uni 0)
        (set! uni-count1 #f)
    )
)

    (when (and 
    (or
    (not (logtest? (-> *game-info* features) (game-feature board)))
    )
    )
    (logior! (-> *game-info* features) (game-feature 
                                                    gun
                                                    board
                                                    gun-upgrade-yellow-ammo-1
                                                    gun-upgrade-yellow-ammo-2
                                                    gun-upgrade-red-ammo-1
                                                    gun-upgrade-red-ammo-2
                                                    gun-upgrade-blue-ammo-1
                                                    gun-upgrade-blue-ammo-2
                                                    gun-upgrade-dark-ammo-1
                                                    gun-upgrade-dark-ammo-2
                                                    board-launch
                                                    board-zap
    ))
    )




(when 
(and 
(cpad-pressed? 0 r3) ;enter virtual menu
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #f)
(= menu-unlocked? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= on-vehicle? #f)
(not (focus-test? *target* pilot))
)
(set! in-menu? #t)
(camera-locked #f #t)
(set! menu-slot 1)
(set! menu-type 0)
)

(when 
(and 
(cpad-pressed? 0 triangle) ;exit virtual menu
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
)
(set! in-menu? #f)
(camera-unlocked)
(when (= (-> *game-info* total-deaths) 0)
    (level-up-cars! 1)
)
)

(when 
(and 
(cpad-pressed? 0 triangle) ;exit modifiers menu
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #t)
(= in-gunmods? #f)
(= in-superpowers? #f)
)
(set! menu-slot 0)
(set! in-modifiers? #f)
)

(when 
(and 
(cpad-pressed? 0 triangle) ;exit gunmods menu
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #t)
(= in-superpowers? #f)
(= in-skill? #f)
)
(set! menu-slot 0)
(set! in-gunmods? #f)
(set! sq-string "")
)

(when 
(and 
(cpad-pressed? 0 triangle) ;exit superpowers menu
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #t)
(= in-skill? #f)
)
(set! menu-slot 0)
(set! in-superpowers? #f)
(set! in-skill? #f)
)
(when 
(and 
(cpad-pressed? 0 triangle) ;exit skill to superpower menu
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #t)
)
(set! in-superpowers? #t)
(set! in-skill? #f)
)

;controls

(when 
(and 
(cpad-pressed? 0 x) ;select modifiers
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
(= menu-select 0)
)
#|
(set! in-modifiers? #t)
(set! menu-slot 0)
(set! sq-string "Roll the modifier!")
|#
)
(when 
(and 
(cpad-pressed? 0 square) ;modifiers select good
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #t)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
(= menu-slot 0)
)
(roll-modifierg)
)
(when 
(and 
(cpad-pressed? 0 square) ;modifiers select bad
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #t)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
(= menu-slot 1)
)
(roll-modifierb)
)
(when 
(and 
(cpad-pressed? 0 square) ;modifiers select both
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #t)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
(= menu-slot 2)
)
(roll-modifierb)
(roll-modifierg)
)

(when 
(and 
(cpad-pressed? 0 x) ;select gunmods
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
(= menu-select 1)
)
(set! in-gunmods? #t)
(set! menu-slot 0)
(set! sq-string "Attach Gun Mod")
(when (= (-> *game-info* total-deaths) 0)
    (level-up-cars! 1)
)
)

(when 
(and 
(cpad-pressed? 0 x) ;select superpowers
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
(= menu-select 2)
)
(set! in-superpowers? #t)
(set! in-skill? #f)
(set! menu-slot 0)
(set! sq-string "Skill Info")
(when (= (-> *game-info* total-deaths) 0)
    (level-up-cars! 1)
)
)
(when 
(and 
(cpad-pressed? 0 square) ;select skillset inside superpowers
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #t)
(= in-skill? #f)
(= menu-select 2)
)
(set! in-superpowers? #f)
(set! in-skill? #t)
(when (= (-> *game-info* total-deaths) 0)
    (level-up-cars! 1)
)
)


(when ;main select
(and 
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
)
    (when ;main-down
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 down)
        )
    (+! menu-select 1)
    (when (> menu-select 2)
        (set! menu-select 1)
    )
    )

    (when ;main-up
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 up)
        )
    (-! menu-select 1)
    (when (< menu-select 1)
        (set! menu-select 2)
    )
    )
)

(when ;modifiers select
(and 
(= in-modifiers? #t)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
)
    (when ;modifiers-down
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 down)
        )
    (+! menu-slot 1)
    (when (> menu-slot 2)
        (set! menu-slot 0)
    )
    )

    (when ;modifiers-up
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 up)
        )
    (-! menu-slot 1)
    (when (< menu-slot 0)
        (set! menu-slot 2)
    )
    )
)

(when ;gunmods select
(and 
(= in-modifiers? #f)
(= in-gunmods? #t)
(= in-superpowers? #f)
(= in-skill? #f)
)
    (when ;gunmods-down
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 down)
        )
    (+! menu-slot 1)
    (when (> menu-slot 1)
        (set! menu-slot 0)
    )
    )

    (when ;gunmods-up
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 up)
        )
    (-! menu-slot 1)
    (when (< menu-slot 0)
        (set! menu-slot 1)
    )
    )
)

(when ;superpowers select
(and 
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #t)
(= in-skill? #f)
)
    (when ;superpowers-down
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 down)
        )
    (+! menu-slot 1)
    (when (> menu-slot 2)
        (set! menu-slot 0)
    )
    )

    (when ;superpowers-up
        (and 
        (= in-menu? #t)
        (cpad-pressed? 0 up)
        )
    (-! menu-slot 1)
    (when (< menu-slot 0)
        (set! menu-slot 2)
    )
    )
)

(when 
    (and
        (= in-tutorial? #t)
        (= tutorial-msg 0)
        *target*
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (not *scene-player*)
    )
        (+! tutorial-freeze 1)
        (when (= tutorial-freeze 1)
            (process-grab? *target* #f)
            (set! r3-noto #t)
            (set! anim-noto -20)
            (set! notoi 0)
        )
        (when (and (>= tutorial-freeze 20) (< tutorial-freeze 700))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_ORANGE>Jak now has a main level, that being his Notoriety~%<COLOR_YELLOW>His level affects with how powerful Jak is~%Slay enemies and complete missions to earn XP"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 60 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        );<COLOR_ORANGE>Press <COLOR_WHITE>R3<COLOR_ORANGE>to view your levels at any time~%<COLOR_RED>There are no level caps
        (when (and (>= tutorial-freeze 730) (< tutorial-freeze 1300))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_ORANGE>Press <COLOR_WHITE>L3<COLOR_ORANGE> to view your levels at any time~%<COLOR_RED>There are no level caps"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 60 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (or (= tutorial-freeze 1300)(and (cpad-pressed? 0 l3) (>= tutorial-freeze 0)))
            (process-release? *target*)
            (set! tutorial-freeze 0)
            (set! in-tutorial? #f)
        )
)

(when 
    (and
        (= in-tutorial? #t)
        (= tutorial-msg 1)
        *target*
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (not *scene-player*)
    )
        (+! tutorial-freeze 1)
        (when (= tutorial-freeze 1)
            (process-grab? *target* #f)
        )
        (when (>= tutorial-freeze 120)
            (send-event *camera* 'teleport-to-vector-start-string
                (new 'static 'vector
                :x (meters 2287.0690)
                :y (meters 41.7641)
                :z (meters -492.7042)
                :w 1.0)
                )
        )
        (when (= tutorial-freeze 119)
            (let (
                    (gp-0 (the-as process #f))
                    (tut-pos1 
                        (new 'static 'vector 
                        :x (meters 2302.5278) 
                        :y (meters 37.5870)
                        :z (meters -492.3220)
                        :w 1.0)
                        )
                    )
                (spawn-gun-upgrade tut-pos1 1.0)
                (task-arrow-custom tut-pos1)
            )
        )
        (when (and (>= tutorial-freeze 100) (< tutorial-freeze 900))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_ORANGE>Gun Upgrades aren't obtained by regular means~%<COLOR_YELLOW>You'll get the red and yellow gun at the start~%But thats it~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>You collect weapons in drops from minibosses, which are found everywhere in the desert!"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 60 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (= tutorial-freeze 899)
            (kill-by-name "upgrade-collectable" *entity-pool*)
            (kill-by-name "task-arrow-custom" *default-pool*)
        )
        (when (= tutorial-freeze 925)
            (let ((man-neo-sat (the manipy
                (ppointer->process (process-spawn manipy
                 :init
                 manipy-init
                 (new 'static 'vector
                 :x (meters 2302.5278) 
                 :y (meters 37.5870)
                 :z (meters -492.3220)
                 :w 1.0)
                 #f
                 (art-group-get-by-name *level* "skel-neo-sat" (the (pointer level) #f))
                 #f
                 0
                 #f
                 :name "manipy-tutorial1"
                 :from *debug-dead-pool*
                 :stack-size #x18000
                 )))))
                 ;(send-event man-neo-sat 'anim-mode 'loop)
                 ;(send-event man-neo-sat 'art-joint-anim "dp-bipedal-shield-out-idle-ja")
                 )
        )
        (when (and (>= tutorial-freeze 925) (< tutorial-freeze 1425))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_ORANGE>Minibosses are found in the desert when <COLOR_RED>no mission is active~%<COLOR_YELLOW>Most of them will not spawn until after they first appear~%~%For example, after the <COLOR_PINK>Satellite<COLOR_ORANGE> miniboss, you'll~%be able to find them across the desert"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 60 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (or (>= tutorial-freeze 1425)(and (cpad-pressed? 0 x) (>= tutorial-freeze 400)))
            (process-release? *target*)
            (kill-by-name "manipy-tutorial1" *default-pool*)
            (kill-by-name "upgrade-collectable" *entity-pool*)
            (kill-by-name "task-arrow-custom" *default-pool*)
            (set! tutorial-freeze 0)
            (set! in-tutorial? #f)
        )
    )

    (when 
    (and
        (= in-tutorial? #t)
        (= tutorial-msg 2)
        *target*
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (not *scene-player*)
    )
        (+! tutorial-freeze 1)
        (when (= tutorial-freeze 1)
            (process-grab? *target* #f)
        )
        (when (= tutorial-freeze 119)
            (let ((marauderc (the manipy
                (ppointer->process (process-spawn manipy
                 :init
                 manipy-init
                 (new 'static 'vector
                 :x (meters 2358.6489)
                 :y (meters 49.1541)
                 :z (meters -507.0516)
                 :w 1.0)
                 #f
                 (art-group-get-by-name *level* "skel-marauder" (the (pointer level) #f))
                 #f
                 0
                 #f
                 :name "manipy-tutorial1"
                 :from *debug-dead-pool*
                 :stack-size #x18000
                 )))))
                 ;(send-event marauderc 'anim-mode 'loop)
                 ;(send-event marauderc 'art-joint-anim "dp-bipedal-shield-out-idle-ja")
                 )
        )
        (when (and (>= tutorial-freeze 119)(< tutorial-freeze 2700))
            (send-event *camera* 'teleport-to-vector-start-string
                (new 'static 'vector
                :x (meters 2377.1108)
                :y (meters 55.1747)
                :z (meters -507.0074)
                :w 1.0)
                )
        )
        (when (and (>= tutorial-freeze 119)(< tutorial-freeze 900))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_ORANGE>Enemies also have levels, too! As you complete missions,~%enemy levels will drastically spike up~%<COLOR_CYAN>Farming is highly recommended~%~%~%~%~%~%~%~%~%~%~%~%~%"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (= tutorial-freeze 900)
            (kill-by-name "manipy-tutorial1" *default-pool*)
        )
        (when (= tutorial-freeze 960)
            (let ((marauderc (the manipy
                (ppointer->process (process-spawn manipy
                 :init
                 manipy-init
                 (new 'static 'vector
                 :x (meters 2358.6489)
                 :y (meters 49.1541)
                 :z (meters -507.0516)
                 :w 1.0)
                 #f
                 (art-group-get-by-name *level* "skel-neo-sat" (the (pointer level) #f))
                 #f
                 0
                 #f
                 :name "manipy-tutorial1"
                 :from *debug-dead-pool*
                 :stack-size #x18000
                 )))))
                 ;(send-event marauderc 'anim-mode 'loop)
                 ;(send-event marauderc 'art-joint-anim "dp-bipedal-shield-out-idle-ja")
                 )
        )
        (when (and (>= tutorial-freeze 960)(< tutorial-freeze 1800))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_CYAN>In the Wasteland, enemies and cars will start off with a level 2 below your <COLOR_ORANGE>Notoriety~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_CYAN>Then gradually, <COLOR_RED>enemy levels will raise up slowly, but endlessly~%<COLOR_YELLOW>Don't take too long in the Wasteland!"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (= tutorial-freeze 1800)
            (kill-by-name "manipy-tutorial1" *default-pool*)
            (kill-by-name "manipy-tutorial2" *default-pool*)
        )
        (when (= tutorial-freeze 1920)
            (spawn-artifact 
                (new 'static 'vector
                 :x (meters 2358.6489)
                 :y (meters 49.1541)
                 :z (meters -507.0516)
                 :w 1.0))
        )
        (when (and (>= tutorial-freeze 1920)(< tutorial-freeze 2700))
            (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_ORANGE>Desert Storms will happen periodically in the Wasteland, not just in missions~%This means you can also find desert artifacts during these storms~%~%Artifacts are worth a lot of XP that goes towards a random skill~%~%But be wary! Wastelanders patrol about the desert and especially near artifacts<COLOR_RED>This does not count for the regular artifact missions"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        )
        (when (or (= tutorial-freeze 2700)(and (cpad-pressed? 0 x) (>= tutorial-freeze 400)))
            (kill-by-name "manipy-tutorial1" *default-pool*)
            (kill-by-name "manipy-tutorial2" *default-pool*)
            (process-release? *target*)
            (set! tutorial-freeze 0)
            (set! in-tutorial? #f)
        )
    )

    (when 
    (and
        (= in-tutorial? #t)
        (= tutorial-msg 3)
        *target*
        (= (paused?) #f)
        (= (pause-allowed?) #t)
        (not *scene-player*)
    )
        (+! tutorial-freeze 1)
        (when (= tutorial-freeze 1)
            ;(process-grab? *target* #t)
            (set! tutorial-freeze 0)
            (set! in-tutorial? #f)
        )
        (when (= tutorial-freeze 60)
            (let ((bipedal (the manipy
                (ppointer->process (process-spawn manipy
                 :init
                 manipy-init
                 (new 'static 'vector
                 :x (meters 2358.6489)
                 :y (meters 49.1541)
                 :z (meters -507.0516)
                 :w 1.0)
                 #f
                 (art-group-get-by-name *level* "skel-dp-bipedal" (the (pointer level) #f))
                 #f
                 0
                 #f
                 :name "manipy-tutorial1"
                 :from *debug-dead-pool*
                 :stack-size #x18000
                 )))))
                 ;(send-event bipedal 'anim-mode 'loop)
                 ;(send-event bipedal 'art-joint-anim "dp-bipedal-shield-out-idle-ja")
                 )
        )
        (when (and (>= tutorial-freeze 60)(< tutorial-freeze 1200))
        )
        (when (= tutorial-freeze 9990)
            (process-release? *target*)
            (set! tutorial-freeze 0)
            (set! in-tutorial? #f)
        )
    
    )

(when (and (= in-superpowers? #f)(= in-modifiers? #f)(= in-gunmods? #f)(= in-skill? #f))
(when 
(and
(= in-menu? #t) ;says HM+ title at the top
(not (cpad-hold? 0 triangle))
(not (cpad-hold? 0 x))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit~%<COLOR_ORANGE>(<COLOR_BLUE>X<COLOR_ORANGE>) <COLOR_YELLOW>Select Option"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-menu? #t) ;says HM+ title at the top (Pressing Triangle)
(cpad-hold? 0 triangle)
(not (cpad-hold? 0 x))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_GREEN> Back/Exit~%<COLOR_ORANGE>(<COLOR_BLUE>X<COLOR_ORANGE>) <COLOR_YELLOW>Select Option"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-menu? #t) ;says HM+ title at the top (Pressing X)
(not (cpad-hold? 0 triangle))
(cpad-hold? 0 x)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit~%<COLOR_ORANGE>(<COLOR_BLUE>X<COLOR_ORANGE>) <COLOR_GREEN>Select Option"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
)

(when (and (or (= in-superpowers? #t)(= in-modifiers? #t)(= in-gunmods? #t))(= in-skill? #f))
(when 
(and
(= in-menu? #t) ;says HM+ title at the top w/ square input
(not (cpad-hold? 0 triangle))
(not (cpad-hold? 0 square))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit~%<COLOR_ORANGE>(<COLOR_PINK>SQUARE<COLOR_ORANGE>) <COLOR_RED>~s"
    sq-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-menu? #t) ;says HM+ title at the top (pressing triangle)
(cpad-hold? 0 triangle)
(not (cpad-hold? 0 square))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_GREEN> Back/Exit~%<COLOR_ORANGE>(<COLOR_PINK>SQUARE<COLOR_ORANGE>) <COLOR_RED>~s"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-menu? #t) ;says HM+ title at the top (pressing square input)
(not (cpad-hold? 0 triangle))
(cpad-hold? 0 square)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit~%<COLOR_ORANGE>(<COLOR_PINK>SQUARE<COLOR_ORANGE>) <COLOR_GREEN>~s"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
)

(when (and (= in-superpowers? #f)(= in-skill? #t))
(when 
(and
(= in-menu? #t) ;says HM+ title at the top
(not (cpad-hold? 0 triangle))
(not (cpad-hold? 0 square))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-menu? #t) ;says HM+ title at the top (Pressing Triangle)
(cpad-hold? 0 triangle)
(not (cpad-hold? 0 square))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_GREEN> Back/Exit"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-menu? #t) ;says HM+ title at the top (Pressing X)
(not (cpad-hold? 0 triangle))
(cpad-hold? 0 square)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Hero<COLOR_BLUE>Mode<COLOR_ORANGE>+ <COLOR_YELLOW>Mod Menu~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_ORANGE>(<COLOR_GREEN>Triangle<COLOR_ORANGE>)<COLOR_YELLOW> Back/Exit"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 10 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
)

(when ;displays main menu options
(and 
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
)
    (when
    (= menu-select 0)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Select Menu:~%~%<COLOR_BLUE>Gun Mods <COLOR_WHITE>(<)~%<COLOR_PINK>Skills <COLOR_WHITE>(<)"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-select 1)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Select Menu:~%~%<COLOR_BLUE>Gun Mods <COLOR_GREEN>(<)~%<COLOR_PINK>Skills <COLOR_WHITE>(<)"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-select 2)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Select Menu:~%~%<COLOR_BLUE>Gun Mods <COLOR_WHITE>(<)~%<COLOR_PINK>Skills <COLOR_GREEN>(<)"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)

(when ;displays modifier menu options
(and 
(= in-menu? #t)
(= in-modifiers? #t)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #f)
)
    (when
    (= menu-slot 0)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Re-Roll <COLOR_GREEN>Good<COLOR_ORANGE> Modifier <COLOR_GREEN>(<)~%<COLOR_ORANGE>Re-Roll <COLOR_RED>Bad<COLOR_ORANGE> Modifier <COLOR_WHITE>(<)~%<COLOR_ORANGE>Re-Roll Both Modifiers! <COLOR_WHITE>(<)"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-slot 1)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Re-Roll <COLOR_GREEN>Good<COLOR_ORANGE> Modifier <COLOR_WHITE>(<)~%<COLOR_ORANGE>Re-Roll <COLOR_RED>Bad<COLOR_ORANGE> Modifier <COLOR_GREEN>(<)~%<COLOR_ORANGE>Re-Roll Both Modifiers! <COLOR_WHITE>(<)"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (= menu-slot 2)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Re-Roll <COLOR_GREEN>Good<COLOR_ORANGE> Modifier <COLOR_WHITE>(<)~%<COLOR_ORANGE>Re-Roll <COLOR_RED>Bad<COLOR_ORANGE> Modifier <COLOR_WHITE>(<)~%<COLOR_ORANGE>Re-Roll Both Modifiers! <COLOR_GREEN>(<)"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)


(when ;displays gunmod menu options
(and 
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #t)
(= in-superpowers? #f)
(= in-skill? #f)
)
    (when
    (= menu-slot 0)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_BLUE>Gun Mods:~%~%<COLOR_ORANGE>??? <COLOR_GREEN>(<)~%<COLOR_ORANGE>??? <COLOR_WHITE>(<)"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-slot 1)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_BLUE>Gun Mods:~%~%<COLOR_ORANGE>??? <COLOR_WHITE>(<)~%<COLOR_ORANGE>??? <COLOR_GREEN>(<)"
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)

(when ;displays skill options
(and 
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #t)
(= in-skill? #f)
)
    (when
    (= menu-slot 0)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_PINK>All Skills:~%~%<COLOR_ORANGE>Notoriety <COLOR_GREEN>Level <COLOR_CYAN> ~d <COLOR_GREEN>(<)~%<COLOR_RED>Guns <COLOR_GREEN>Level<COLOR_CYAN> ~d <COLOR_WHITE>(<)~%<COLOR_PINK>Vehicle <COLOR_GREEN>Level<COLOR_CYAN> ~d <COLOR_WHITE>(<)"
        notoriety-level
        guns-level
        cars-level
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-slot 1)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_PINK>All Skills:~%~%<COLOR_ORANGE>Notoriety <COLOR_GREEN>Level <COLOR_CYAN> ~d <COLOR_WHITE>(<)~%<COLOR_RED>Guns <COLOR_GREEN>Level<COLOR_CYAN> ~d <COLOR_GREEN>(<)~%<COLOR_PINK>Vehicle <COLOR_GREEN>Level<COLOR_CYAN> ~d <COLOR_WHITE>(<)"
        notoriety-level
        guns-level
        cars-level
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when
    (= menu-slot 2)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_PINK>All Skills:~%~%<COLOR_ORANGE>Notoriety <COLOR_GREEN>Level <COLOR_CYAN> ~d <COLOR_WHITE>(<)~%<COLOR_RED>Guns <COLOR_GREEN>Level<COLOR_CYAN> ~d <COLOR_WHITE>(<)~%<COLOR_PINK>Vehicle <COLOR_GREEN>Level<COLOR_CYAN> ~d <COLOR_GREEN>(<)"
        notoriety-level
        guns-level
        cars-level
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)

(when ;displays one skill with all of its attributes
(and 
(= in-menu? #t)
(= in-modifiers? #f)
(= in-gunmods? #f)
(= in-superpowers? #f)
(= in-skill? #t)
)
    (when
    (= menu-slot 0)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_ORANGE>Notoriety Level:<COLOR_CYAN> ~d ~%~%<COLOR_GREEN>Your Notoriety Level controls how fast, strong, and how much HP Jak has.~%~%Enemies will also have a level for themselves, all tied to the areas they're in~%~%<COLOR_YELLOW>Complete Main-Line/Side Missions, and level other skills to earn XP"
        notoriety-level
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (draw-XP-bar)
        (when 
            (or
                (!= noto-draw-x 190)
                (!= noto-draw-y 60)
                (!= guns-draw-x 190)
                (!= guns-draw-y 60)
                (!= car-draw-x 190)
                (!= car-draw-y 60)
            )
                (set! noto-draw-x 190)
                (set! noto-draw-y 60)
                (set! guns-draw-x 190)
                (set! guns-draw-y 60)
                (set! car-draw-x 190)
                (set! car-draw-y 60)
            )
    )
    (when
    (= menu-slot 1)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_RED>Guns:<COLOR_CYAN> ~d ~%~%<COLOR_ORANGE>Jak's guns can be upgraded to fire faster, bigger, and stronger.~%~%<COLOR_YELLOW>Deplete ammo to earn XP"
        guns-level
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (draw-XP-bar)
        (when 
            (or
                (!= noto-draw-x 190)
                (!= noto-draw-y 60)
                (!= guns-draw-x 190)
                (!= guns-draw-y 60)
                (!= car-draw-x 190)
                (!= car-draw-y 60)
            )
                (set! noto-draw-x 190)
                (set! noto-draw-y 60)
                (set! guns-draw-x 190)
                (set! guns-draw-y 60)
                (set! car-draw-x 190)
                (set! car-draw-y 60)
            )
    )
    (when
    (= menu-slot 2)
        (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_PINK>Vehicles:<COLOR_CYAN> ~d ~%~%<COLOR_ORANGE>Wasteland cars can have better output damage on guns, alongside bigger boost times.~%~%<COLOR_YELLOW>Destroy other Marauder Cars to earn XP"
        cars-level
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 50 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (draw-XP-bar)
        (when 
            (or
                (!= noto-draw-x 190)
                (!= noto-draw-y 60)
                (!= guns-draw-x 190)
                (!= guns-draw-y 60)
                (!= car-draw-x 190)
                (!= car-draw-y 60)
            )
                (set! noto-draw-x 190)
                (set! noto-draw-y 60)
                (set! guns-draw-x 190)
                (set! guns-draw-y 60)
                (set! car-draw-x 190)
                (set! car-draw-y 60)
            )
    )
)

(when (and (= (-> *game-info* total-deaths) 0)(not (focus-test? *target* pilot))(= menu-unlocked? #t)(= on-vehicle? #f)(not *scene-player*)(= in-menu? #f))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Press <COLOR_WHITE>R3 <COLOR_RED>to view the HeroMode+ stats!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 310 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= (-> *game-info* total-deaths) 0)(= menu-unlocked? #t)(= on-vehicle? #f)(not *scene-player*)(= in-menu? #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Welcome to <COLOR_BLUE>Hero<COLOR_RED>Mode<COLOR_CYAN>+~%<COLOR_GREEN>Made by Kraken~%~%<COLOR_CYAN>RPG Elements have been added!~%Information about your levels can be accessed in the <COLOR_ORANGE>Skills<COLOR_CYAN> tab~%~%Weapons are not obtained the traditional way! You only get these two guns to start.~%The new way to get weapons is to find artifacts in the wasteland~%~%Gun Mods are new additions that are incredibly rare, and each one has its own function.~%Good luck finding one of those~%~%Enemies also have a level, so be careful treading into certain areas~%Farming enemies is definitely recommended as the game accelerates enemy levels drastically~%The Desert Wasteland starts enemies 2 levels below, but gradually increases with time, infinitely~%Don't take too long on desert missions!~%~%<COLOR_GREEN>Good Luck!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 90 0.0 (font-color default) (font-flags middle shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-debug? #t)
*debug-segment* 
(= in-desert-game-task? #t)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>in-desert-game-task? <COLOR_GREEN>#t"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 70 0.0 (font-color default) (font-flags right shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-debug? #t)
*debug-segment* 
(= in-desert-game-task? #f)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>in-desert-game-task? <COLOR_RED>#f"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 70 0.0 (font-color default) (font-flags right shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-debug? #t)
*debug-segment* 
(= hud-timer-on? #f)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>hud-timer-on? <COLOR_RED>#f"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 80 0.0 (font-color default) (font-flags right shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-debug? #t)
*debug-segment* 
(= hud-timer-on? #t)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>hud-timer-on? <COLOR_GREEN>#t"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 80 0.0 (font-color default) (font-flags right shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-debug? #t)
*debug-segment* 
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Mod Script Active!~%~%<COLOR_YELLOW>continue-deaths = <COLOR_ORANGE>~D~%<COLOR_YELLOW>task-deaths = <COLOR_ORANGE>~D~%<COLOR_YELLOW>total-deaths = <COLOR_ORANGE>~D~%<COLOR_RED>enemy-noto = ~d"
    (-> *game-info* continue-deaths)
    (-> *game-info* task-deaths)
    (-> *game-info* total-deaths)
    enemy-noto
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 1 0.0 (font-color default) (font-flags right shadow kerning large))))
    (set! (-> font-ctx scale) 0.325)
    (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
    (and
        (= desert-spawn-mission-deserta #t) ;exit the task marauder mission when far away
        (task-node-closed? (game-task-node desert-spawn-task-deserta-goto-artifact))
        (>= (vector-vector-distance (new 'static 'vector
                    :x (meters 2539.2421)
                    :y (meters 23.0453)
                    :z (meters 3332.9597)
                    :w 1.0
                    )
                     (target-pos 0)) 2500000.0)
    )
    (task-node-open! (game-task-node desert-spawn-task-deserta-goto-artifact) #t)
    (set! desert-spawn-mission-deserta #f)
    )

(when 
    (and
        (= desert-spawn-mission-oasis #t) ;exit the task marauder mission when far away
        (task-node-closed? (game-task-node desert-spawn-task-oasis-goto-artifact))
        (>= (vector-vector-distance (new 'static 'vector
                    :x (meters 638.2655)
                    :y (meters 14.8769)
                    :z (meters 2522.8432)
                    :w 1.0
                    )
                        (target-pos 0)
                        )
                        2500000.0
                        )
    )
    (task-node-open! (game-task-node desert-spawn-task-oasis-goto-artifact) #t)
    (set! desert-spawn-mission-oasis #f)
    )


(none)
)

(defun spawn-gun-upgrade ((vec vector) (amount float))
    (birth-pickup-at-point vec (pickup-type gun-yellow-1) amount #t *entity-pool* (the-as fact-info #f))
    (none)
)

(defun spawn-oasis-artifact ()
    (let ((pos 
            (new 'static 'vector
                    :x (meters 638.2655)
                    :y (meters 14.8769)
                    :z (meters 2522.8432)
                    :w 1.0
                    )
        )
        )
        (when (= in-desert-game-task? #f)
            (spawn-artifact pos)
            (task-node-open! (game-task-node desert-spawn-task-oasis-goto-artifact) #t)
            (set! desert-spawn-mission-oasis #t)
        )
    )
    (none)
)

;(new 'static 'vector :x (meters 2539.2421) :y (meters 23.0453) :z (meters 3332.9597) :w 1.0)

(defun spawn-deserta-artifact ()
    (let ((pos 
            (new 'static 'vector
                    :x (meters 2539.2421)
                    :y (meters 23.0453)
                    :z (meters 3332.9597)
                    :w 1.0
                    )
        )
        )
        (when (= in-desert-game-task? #f)
            (spawn-artifact pos)
            (task-node-open! (game-task-node desert-spawn-task-deserta-goto-artifact) #t)
            (set! desert-spawn-mission-deserta #t)
        )
    )
    (none)
)

(defun runs-on-blackout ()
    (kill-by-name "neo-sat" *default-pool*)
    (kill-by-name "manipy-sat" *default-pool*)
    (kill-by-name "dp-bipedal" *default-pool*)
    (task-node-open! (game-task-node desert-spawn-task-oasis-goto-artifact) #t)
    (task-node-open! (game-task-node desert-spawn-task-deserta-goto-artifact) #t)
    (set! desert-spawn-mission-oasis #f)
    (none)
)